@page "/skyline"
@inherits UjuziTek.Pages.FragmentNavigationBase
@inject IJSRuntime JS
@implements IDisposable
@using Syncfusion.Blazor.Schedule

<div @onscroll="OnScroll"><!-- hero-section -->
	<section class="hero-section gap" style="background-image: url(assets/img/background-1.png);" @onscroll="OnScroll">
		<div class="container">
			<div class="row align-items-center">
				<div class="col-lg-6" data-aos="fade-up"  data-aos-delay="200" data-aos-duration="300">
					<div class="restaurant">
						<h1>Affordable,</h1>
						<h1 class="comfy-rooms-style"><span>Comfy </span><span>Rooms</span></h1> 
						<p>From Westlake, Nairobi Kenya to Stone Town Zanzibar, Tanzania check out our affordable offerings.</p>
						<div class="nice-select-one">
							@* <div class="m-2 p-2">Scroll events: @counter</div> *@
							<select class="nice-select Advice">
							  <option>Choose a location</option>
							  <option>Nairobi Kilimani</option>
							  <option>Nairobi Studio House Kilimani</option>							  
							  <option>Stone Town Zanzibar</option>
							</select>	
						<a href="#sunset" class="button button-2">Book Now</a>
						</div>
					</div>
				</div>
				<div class="col-lg-6">
					<div class="img-restaurant" data-aos="flip-up"  data-aos-delay="300" data-aos-duration="400">
						<img alt="man" src="assets/img/octagon/skyline1.jpg">
						@* <div class="wilmington">
							<img alt="img" src="https://via.placeholder.com/90x90">
							<div>
								<p>Restaurant of the Month</p>
								<h6>The Wilmington</h6>
								<div>
									<i class="fa-solid fa-star"></i>
									<i class="fa-solid fa-star"></i>
									<i class="fa-solid fa-star"></i>
									<i class="fa-solid fa-star"></i>
									<i class="fa-regular fa-star-half-stroke"></i>
								</div>
							</div>
						</div> *@
						<div class="wilmington location-restaurant">
							<i class="fa-solid fa-location-dot"></i>
							<div>
								<h6>13 Units</h6>
								<p>Between Nairobi and Zanzibar</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
	<!-- works-section -->
	<section class="works-section gap no-top" id="locations">
		<div class="container">
			<div class="fading" data-aos="fade-up"  data-aos-delay="200" data-aos-duration="300">
				<h2>Properties</h2>
				<p>Let us lighten your load by providing transport from the airport, locale information<br> and many other such services.</p>
			</div>
			<div class="row align-items-center">
			<SfSchedule TValue="AppointmentData" Height="650px" @bind-SelectedDate="@CurrentDate">
				<ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
				<ScheduleViews>
					<ScheduleView Option="View.Day"></ScheduleView>
					<ScheduleView Option="View.Week"></ScheduleView>
					<ScheduleView Option="View.WorkWeek"></ScheduleView>
					<ScheduleView Option="View.Month"></ScheduleView>
					<ScheduleView Option="View.Agenda"></ScheduleView>
				</ScheduleViews>
			</SfSchedule>
			</div>
		</div>
	</section>
	<section class="works-section gap no-top" id="Sunset">
	<div class="control-section">
	</div>
	</section>

</div>	
@code {

    DateTime CurrentDate = new DateTime(2020, 2, 14);
    List<AppointmentData> DataSource = new List<AppointmentData>
    {
        new AppointmentData { Id = 1, Subject = "Paris", StartTime = new DateTime(2020, 2, 13, 10, 0, 0) , EndTime = new DateTime(2020, 2, 13, 12, 0, 0) },
        new AppointmentData { Id = 2, Subject = "Germany", StartTime = new DateTime(2020, 2, 15, 10, 0, 0) , EndTime = new DateTime(2020, 2, 15, 12, 0, 0) }
    };
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }

    ElementReference scrollElement;

    DotNetObjectReference<Skyline> selfReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfReference = DotNetObjectReference.Create(this);
            var minInterval = 500; // Only notify every 500 ms
            await JS.InvokeVoidAsync("onDivScroll",
                scrollElement, minInterval);
        }
    }

	    private int counter;

    private void OnScroll()
    {
        counter++;
    }
	
}