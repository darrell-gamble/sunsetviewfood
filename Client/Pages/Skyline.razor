@page "/skyline"
@inherits UjuziTek.Pages.FragmentNavigationBase
@inject IJSRuntime JS
@implements IDisposable 
@using Syncfusion.Blazor.Schedule

<div class="section-container">
    <div style="margin-bottom: 20px" class="properties-h2"><h2>Nairobi Skyline</h2></div>

    <p style="">Let us lighten your load by providing transport from the airport.</p>
    </div>

    <div class="row align-items-center pre-gallery">  
    <ul id="hexGrid">
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline1.jpg" />
            <h1>Skyline 1</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline2.jpg" />
            <h1>Skyline 2</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline3.jpg" />
            <h1>Skyline 3</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline4.jpg" />
            <h1>Skyline 4</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline5.jpg" />
            <h1>Skyline 5</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline6.jpg" />
            <h1>Skyline 6</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline7.jpg" />
            <h1>Skyline 7</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline8.jpg" />
            <h1>Skyline 8</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>
      <li class="hex">
        <div class="hexIn">
          <a class="hexLink" href="#">
            <img src="assets/img/Skyline/Skyline10.jpg" />
            <h1>Skyline 8</h1>
            <p>Some sample text about the apartment this hexagon refers to</p>
          </a>
        </div>
      </li>

    </ul>
	</div>
@code {

    DateTime CurrentDate = new DateTime(2020, 2, 14);
    List<AppointmentData> DataSource = new List<AppointmentData>
    {
        new AppointmentData { Id = 1, Subject = "Paris", StartTime = new DateTime(2020, 2, 13, 10, 0, 0) , EndTime = new DateTime(2020, 2, 13, 12, 0, 0) },
        new AppointmentData { Id = 2, Subject = "Germany", StartTime = new DateTime(2020, 2, 15, 10, 0, 0) , EndTime = new DateTime(2020, 2, 15, 12, 0, 0) }
    };
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }

    ElementReference scrollElement;

    DotNetObjectReference<Skyline> selfReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfReference = DotNetObjectReference.Create(this);
            var minInterval = 500; // Only notify every 500 ms
            await JS.InvokeVoidAsync("onDivScroll",
                scrollElement, minInterval);
        }
    }

	    private int counter;

    private void OnDivScroll()
    {
        counter++;
    }
	
}